/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TwoFa } from "./TwoFa";
import { TwoFaCountArgs } from "./TwoFaCountArgs";
import { TwoFaFindManyArgs } from "./TwoFaFindManyArgs";
import { TwoFaFindUniqueArgs } from "./TwoFaFindUniqueArgs";
import { CreateTwoFaArgs } from "./CreateTwoFaArgs";
import { UpdateTwoFaArgs } from "./UpdateTwoFaArgs";
import { DeleteTwoFaArgs } from "./DeleteTwoFaArgs";
import { User } from "../../user/base/User";
import { TwoFaService } from "../twoFa.service";
@graphql.Resolver(() => TwoFa)
export class TwoFaResolverBase {
  constructor(protected readonly service: TwoFaService) {}

  async _twoFasMeta(
    @graphql.Args() args: TwoFaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TwoFa])
  async twoFas(@graphql.Args() args: TwoFaFindManyArgs): Promise<TwoFa[]> {
    return this.service.twoFas(args);
  }

  @graphql.Query(() => TwoFa, { nullable: true })
  async twoFa(
    @graphql.Args() args: TwoFaFindUniqueArgs
  ): Promise<TwoFa | null> {
    const result = await this.service.twoFa(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TwoFa)
  async createTwoFa(@graphql.Args() args: CreateTwoFaArgs): Promise<TwoFa> {
    return await this.service.createTwoFa({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TwoFa)
  async updateTwoFa(
    @graphql.Args() args: UpdateTwoFaArgs
  ): Promise<TwoFa | null> {
    try {
      return await this.service.updateTwoFa({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TwoFa)
  async deleteTwoFa(
    @graphql.Args() args: DeleteTwoFaArgs
  ): Promise<TwoFa | null> {
    try {
      return await this.service.deleteTwoFa(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: TwoFa): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
