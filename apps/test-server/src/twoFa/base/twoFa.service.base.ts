/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TwoFa as PrismaTwoFa,
  User as PrismaUser,
} from "@prisma/client";

export class TwoFaServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TwoFaCountArgs, "select">): Promise<number> {
    return this.prisma.twoFa.count(args);
  }

  async twoFas(args: Prisma.TwoFaFindManyArgs): Promise<PrismaTwoFa[]> {
    return this.prisma.twoFa.findMany(args);
  }
  async twoFa(args: Prisma.TwoFaFindUniqueArgs): Promise<PrismaTwoFa | null> {
    return this.prisma.twoFa.findUnique(args);
  }
  async createTwoFa(args: Prisma.TwoFaCreateArgs): Promise<PrismaTwoFa> {
    return this.prisma.twoFa.create(args);
  }
  async updateTwoFa(args: Prisma.TwoFaUpdateArgs): Promise<PrismaTwoFa> {
    return this.prisma.twoFa.update(args);
  }
  async deleteTwoFa(args: Prisma.TwoFaDeleteArgs): Promise<PrismaTwoFa> {
    return this.prisma.twoFa.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.twoFa
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
