/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TwoFaService } from "../twoFa.service";
import { TwoFaCreateInput } from "./TwoFaCreateInput";
import { TwoFa } from "./TwoFa";
import { TwoFaFindManyArgs } from "./TwoFaFindManyArgs";
import { TwoFaWhereUniqueInput } from "./TwoFaWhereUniqueInput";
import { TwoFaUpdateInput } from "./TwoFaUpdateInput";

export class TwoFaControllerBase {
  constructor(protected readonly service: TwoFaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TwoFa })
  async createTwoFa(@common.Body() data: TwoFaCreateInput): Promise<TwoFa> {
    return await this.service.createTwoFa({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        code: true,
        createdAt: true,
        id: true,
        isVerified: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TwoFa] })
  @ApiNestedQuery(TwoFaFindManyArgs)
  async twoFas(@common.Req() request: Request): Promise<TwoFa[]> {
    const args = plainToClass(TwoFaFindManyArgs, request.query);
    return this.service.twoFas({
      ...args,
      select: {
        code: true,
        createdAt: true,
        id: true,
        isVerified: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TwoFa })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async twoFa(
    @common.Param() params: TwoFaWhereUniqueInput
  ): Promise<TwoFa | null> {
    const result = await this.service.twoFa({
      where: params,
      select: {
        code: true,
        createdAt: true,
        id: true,
        isVerified: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TwoFa })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTwoFa(
    @common.Param() params: TwoFaWhereUniqueInput,
    @common.Body() data: TwoFaUpdateInput
  ): Promise<TwoFa | null> {
    try {
      return await this.service.updateTwoFa({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          code: true,
          createdAt: true,
          id: true,
          isVerified: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TwoFa })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTwoFa(
    @common.Param() params: TwoFaWhereUniqueInput
  ): Promise<TwoFa | null> {
    try {
      return await this.service.deleteTwoFa({
        where: params,
        select: {
          code: true,
          createdAt: true,
          id: true,
          isVerified: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
